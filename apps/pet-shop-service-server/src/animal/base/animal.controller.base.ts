/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnimalService } from "../animal.service";
import { AnimalCreateInput } from "./AnimalCreateInput";
import { Animal } from "./Animal";
import { AnimalFindManyArgs } from "./AnimalFindManyArgs";
import { AnimalWhereUniqueInput } from "./AnimalWhereUniqueInput";
import { AnimalUpdateInput } from "./AnimalUpdateInput";

export class AnimalControllerBase {
  constructor(protected readonly service: AnimalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Animal })
  async createAnimal(@common.Body() data: AnimalCreateInput): Promise<Animal> {
    return await this.service.createAnimal({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Animal] })
  @ApiNestedQuery(AnimalFindManyArgs)
  async animals(@common.Req() request: Request): Promise<Animal[]> {
    const args = plainToClass(AnimalFindManyArgs, request.query);
    return this.service.animals({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Animal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async animal(
    @common.Param() params: AnimalWhereUniqueInput
  ): Promise<Animal | null> {
    const result = await this.service.animal({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Animal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnimal(
    @common.Param() params: AnimalWhereUniqueInput,
    @common.Body() data: AnimalUpdateInput
  ): Promise<Animal | null> {
    try {
      return await this.service.updateAnimal({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Animal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnimal(
    @common.Param() params: AnimalWhereUniqueInput
  ): Promise<Animal | null> {
    try {
      return await this.service.deleteAnimal({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
