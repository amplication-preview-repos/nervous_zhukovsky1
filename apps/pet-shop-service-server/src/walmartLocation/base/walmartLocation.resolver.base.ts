/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WalmartLocation } from "./WalmartLocation";
import { WalmartLocationCountArgs } from "./WalmartLocationCountArgs";
import { WalmartLocationFindManyArgs } from "./WalmartLocationFindManyArgs";
import { WalmartLocationFindUniqueArgs } from "./WalmartLocationFindUniqueArgs";
import { DeleteWalmartLocationArgs } from "./DeleteWalmartLocationArgs";
import { WalmartLocationService } from "../walmartLocation.service";
@graphql.Resolver(() => WalmartLocation)
export class WalmartLocationResolverBase {
  constructor(protected readonly service: WalmartLocationService) {}

  async _walmartLocationsMeta(
    @graphql.Args() args: WalmartLocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WalmartLocation])
  async walmartLocations(
    @graphql.Args() args: WalmartLocationFindManyArgs
  ): Promise<WalmartLocation[]> {
    return this.service.walmartLocations(args);
  }

  @graphql.Query(() => WalmartLocation, { nullable: true })
  async walmartLocation(
    @graphql.Args() args: WalmartLocationFindUniqueArgs
  ): Promise<WalmartLocation | null> {
    const result = await this.service.walmartLocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WalmartLocation)
  async deleteWalmartLocation(
    @graphql.Args() args: DeleteWalmartLocationArgs
  ): Promise<WalmartLocation | null> {
    try {
      return await this.service.deleteWalmartLocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
