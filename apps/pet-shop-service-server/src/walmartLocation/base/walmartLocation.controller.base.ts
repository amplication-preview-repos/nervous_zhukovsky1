/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WalmartLocationService } from "../walmartLocation.service";
import { WalmartLocationCreateInput } from "./WalmartLocationCreateInput";
import { WalmartLocation } from "./WalmartLocation";
import { WalmartLocationFindManyArgs } from "./WalmartLocationFindManyArgs";
import { WalmartLocationWhereUniqueInput } from "./WalmartLocationWhereUniqueInput";
import { WalmartLocationUpdateInput } from "./WalmartLocationUpdateInput";

export class WalmartLocationControllerBase {
  constructor(protected readonly service: WalmartLocationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WalmartLocation })
  async createWalmartLocation(
    @common.Body() data: WalmartLocationCreateInput
  ): Promise<WalmartLocation> {
    return await this.service.createWalmartLocation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WalmartLocation] })
  @ApiNestedQuery(WalmartLocationFindManyArgs)
  async walmartLocations(
    @common.Req() request: Request
  ): Promise<WalmartLocation[]> {
    const args = plainToClass(WalmartLocationFindManyArgs, request.query);
    return this.service.walmartLocations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WalmartLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async walmartLocation(
    @common.Param() params: WalmartLocationWhereUniqueInput
  ): Promise<WalmartLocation | null> {
    const result = await this.service.walmartLocation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WalmartLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWalmartLocation(
    @common.Param() params: WalmartLocationWhereUniqueInput,
    @common.Body() data: WalmartLocationUpdateInput
  ): Promise<WalmartLocation | null> {
    try {
      return await this.service.updateWalmartLocation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WalmartLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWalmartLocation(
    @common.Param() params: WalmartLocationWhereUniqueInput
  ): Promise<WalmartLocation | null> {
    try {
      return await this.service.deleteWalmartLocation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
